diff -r -u '--exclude=*.pyc' --no-dereference /home/haim/web2py_orig/gluon/compileapp.py /home/haim//web2py/gluon/compileapp.py
--- /home/haim/web2py_orig/gluon/compileapp.py	2024-02-04 18:29:14.740928889 +0200
+++ /home/haim//web2py/gluon/compileapp.py	2023-12-18 11:31:09.566353087 +0200
@@ -554,7 +554,10 @@
 
 
 REGEX_LONG_STRING = re.compile('(""".*?"""|' "'''.*?''')", re.DOTALL)
-REGEX_EXPOSED = re.compile(r"^def\s+(_?[a-zA-Z0-9]\w*)\( *\)\s*:", re.MULTILINE)
+# REGEX_EXPOSED = re.compile(r"^def\s+(_?[a-zA-Z0-9]\w*)\( *\)\s*:", re.MULTILINE)
+REGEX_EXPOSED = re.compile(r"^def\s+(_?[a-zA-Z0-9]\w*)\( *(?:vars)?\)\s*", re.MULTILINE)
+# +    ###haim'^def\s+(?P<name>_?[a-zA-Z0-9]\w*)\( *(?:vars)?\)\s*',
+# +    '^def\s+(?P<name>_?[a-zA-Z0-9]\w*)\( *(?:vars)?\)\s*:',
 
 
 def find_exposed_functions(data):
diff -r -u '--exclude=*.pyc' --no-dereference /home/haim/web2py_orig/gluon/contrib/memcache/__init__.py /home/haim//web2py/gluon/contrib/memcache/__init__.py
--- /home/haim/web2py_orig/gluon/contrib/memcache/__init__.py	2024-02-04 18:29:14.750928885 +0200
+++ /home/haim//web2py/gluon/contrib/memcache/__init__.py	2023-12-07 11:46:20.358286365 +0200
@@ -8,7 +8,7 @@
 cache.memcache = MemcacheClient(request,[127.0.0.1:11211],debug=true)
 """
 
-import cPickle as pickle
+import pickle
 import thread
 from gluon import current
 
diff -r -u '--exclude=*.pyc' --no-dereference /home/haim/web2py_orig/gluon/contrib/websocket_messaging.py /home/haim//web2py/gluon/contrib/websocket_messaging.py
--- /home/haim/web2py_orig/gluon/contrib/websocket_messaging.py	2024-02-04 18:29:14.760928881 +0200
+++ /home/haim//web2py/gluon/contrib/websocket_messaging.py	2023-12-19 11:52:15.477160298 +0200
@@ -89,18 +89,17 @@
 import tornado.ioloop
 import tornado.web
 import hmac
-import sys
 import optparse
 import time
-import sys
-import gluon.utils
 import hashlib
 from gluon._compat import to_native, to_bytes, urlencode, urlopen
+from gluon.utils import compare as u_compare
 
 listeners, names, tokens = {}, {}, {}
 
 def websocket_send(url, message, hmac_key=None, group='default'):
-    sig = hmac_key and hmac.new(to_bytes(hmac_key), to_bytes(message), hashlib.md5).hexdigest() or ''
+    # sig = hmac_key and hmac.new(to_bytes(hmac_key), to_bytes(message), hashlib.md5).hexdigest() or ''
+    sig = hmac_key and hmac.new(to_bytes(hmac_key), to_bytes(message), digestmod='MD5').hexdigest() or ''
     params = urlencode(
         {'message': message, 'signature': sig, 'group': group})
     f = urlopen(url, to_bytes(params))
@@ -123,7 +122,7 @@
             if hmac_key:
                 signature = self.request.arguments['signature'][0]
                 actual_signature = hmac.new(to_bytes(hmac_key), to_bytes(message), hashlib.md5).hexdigest()
-                if not gluon.utils.compare(to_native(signature), actual_signature):
+                if not u_compare(to_native(signature), actual_signature):
                     self.send_error(401)
             for client in listeners.get(group, []):
                 client.write_message(message)
@@ -143,7 +142,7 @@
             if hmac_key:
                 signature = self.request.arguments['signature'][0]
                 actual_signature = hmac.new(to_bytes(hmac_key), to_bytes(message), hashlib.md5).hexdigest()
-                if not gluon.utils.compare(to_native(signature), actual_signature):
+                if not u_compare(to_native(signature), actual_signature):
                     self.send_error(401)
             tokens[message] = None
 
diff -r -u '--exclude=*.pyc' --no-dereference /home/haim/web2py_orig/gluon/serializers.py /home/haim//web2py/gluon/serializers.py
--- /home/haim/web2py_orig/gluon/serializers.py	2024-02-04 18:29:14.760928881 +0200
+++ /home/haim//web2py/gluon/serializers.py	2023-12-19 12:22:45.363357183 +0200
@@ -94,7 +94,9 @@
     elif hasattr(o, "as_dict") and callable(o.as_dict):
         return o.as_dict()
     else:
-        raise TypeError(repr(o) + " is not JSON serializable")
+        s = str(o)
+        return s
+        # raise TypeError(repr(o) + " is not JSON serializable")
 
 
 def xml_rec(value, key, quote=True):
@@ -152,10 +154,7 @@
 
             yield chunk
 
-
-def json(
-    value, default=custom_json, indent=None, sort_keys=False, cls=JSONEncoderForHTML
-):
+def json(value, default=custom_json, indent=None, sort_keys=True, cls=JSONEncoderForHTML):
     return json_parser.dumps(
         value, default=default, cls=cls, sort_keys=sort_keys, indent=indent
     )
